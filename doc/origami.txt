origami.txt A plugin to insert/delete/justify all the fold markers

     _______   _______  _________  _______   _______   _______  _________        ~
    (  ___  ) (  ____ ) \__   __/ (  ____ \ (  ___  ) (       ) \__   __/        ~
    | (   ) | | (    )|    ) (    | (    \/ | (   ) | | () () |    ) (           ~
    | |   | | | (____)|    | |    | |       | (___) | | || || |    | |           ~
    | |   | | |     __)    | |    | | ____  |  ___  | | |(_)| |    | |           ~
    | |   | | | (\ (       | |    | | \_  ) | (   ) | | |   | |    | |           ~
    | (___) | | ) \ \__ ___) (___ | (___) | | )   ( | | )   ( | ___) (___        ~
    (_______) |/   \__/ \_______/ (_______) |/     \| |/     \| \_______/        ~


==============================================================================
                                                      *origami-contents* *origami*
1. Contents

  1. Contents         |origami-contents|
  2. Mappings         |origami-mappings|
  3. Customization    |origami-customization|
  4. Contributing     |origami-contributing|
  5. License          |origami-license|


==============================================================================
                                                              *origami-mappings*
2. Mappings

Out of the box, the followings mappings are defined by default

  `<count>Za`  Align all folds of level 'count'
         `ZA`  Align all folds
  `<count>ZF`  Insert a start foldmarker of level 'count' at the end of line and comment it
  `<count>Zf`  Insert a start foldmarker of level 'count' at the end of line but don't comment it
  `<count>ZC`  Insert an end  foldmarker of level 'count' at the end of line and comment it
  `<count>Zc`  Insert an end  foldmarker of level 'count' at the end of line but don't comment it
         `ZD`  Delete the foldmarker from the line

  In each of the above, if the count is not specified, it acts on unnumbered folds

  Thus,
     `Za`  will align all the unnumbered folds
     `ZA`  will align all the folds of all levels
    `1Za`  will align all the folds of level 1
    `2Zf`  will insert a level 2 start foldmarker
    `3ZF`  will insert a level 3 start foldmarker enclosed in comments
    `4Zc`  will insert a level 4 end foldmarker
    `5ZC`  will insert a level 5 end foldmarker enclosed in comments


==============================================================================
                                                         *origami-customization*
3. Customization

Set up Origami the way you want using the following options

                                                                    *OrigamiMap*
'g:OrigamiMap'
  Type: Dictionary, Default:
  To set up your own mappings copy the following dictionary and edit it
      " let g:OrigamiMap = {
      "   \ 'Leader'           : "Z",
      "   \ 'Align'            : "a",
      "   \ 'AlignAll'         : "A",
      "   \ 'CommentedOpen'    : "F",
      "   \ 'UncommentedOpen'  : "f",
      "   \ 'CommentedClose'   : "C",
      "   \ 'UncommentedClose' : "c",
      "   \ 'Delete'           : "D",
      "   \ }
  To disable a map entirely, specify it as an empty string.
  If a key is not specified, the default value will be picked up.
  These same characters will be used to invoke the shortcuts.

                                                                *OrigamiPadding*
'g:OrigamiPadding'
  Type: number, Default: 0

  Specify extra padding to be added. By default alignment happens on the next
  tabstop. This behaves differently depending on the |expandtab| setting. If
  set, this specifies the number of spaces to insert else the number of tabs.
  `b:OrigamiPadding` can be specified separately for buffer-specific settings.

                                                         *OrigamiSeparateLevels*
'g:OrigamiSeparateLevels'
  Type: boolean, Default: 0

  Align different fold-levels independently.
  `b:OrigamiSeparateLevels` can be specified for buffer-specific settings.
  Note: When this is enabled, it automatically disables OrigamiFoldAtCol,
        OrigamiIncAllLines and OrigamiStaggeredSpacing

                                                              *OrigamiFoldAtCol*
'g:OrigamiFoldAtCol'
  Type: number, Default 0

  Force the markers to align at the specified column i.e. the first character
  of the foldmarker will lie on that column.
  If set to 0, this will auto- detect alignment position.
  This can also be specified relative to the textwidth setting using +/-
>
    :let g:OrigamiFoldAtCol = "+1"
<
  `b:OrigamiFoldAtCol` can be specified for buffer-specific settings.
  Note: When this is enabled, it automatically disables OrigamiIncAllLines

                                                            *OrigamiIncAllLines*
'g:OrigamiIncAllLines'
  Specify if all lines should be considered while aligning the foldmarkers or
  only those having a foldmarker. If set to 1, the foldmarkers will be aligned
  outside the length of the longest line irrespective of whether it has a
  fold-open marker or not.
  `b:OrigamiIncAllLines` can be specified for buffer-specific settings.

                                                       *OrigamiStaggeredSpacing*
'g:OrigamiStaggeredSpacing'
  Type: boolean, Default: 0
  Specify if different foldlevels should be staggered. This behaves differently
  depending on the |expandtab| setting. If set, this specifies the number of
  spaces to stagger and if not, it specifies the number of tabs.
  `b:OrigamiStaggeredSpacing` can be specified for buffer-specific settings.


==============================================================================
                                                          *origami-contributing*
4. Contributing

Please post any issues and all your suggestions on Github
https://github.com/kshenoy/vim-origami

Show some love by spreading the word and rating on
http://www.vim.org/scripts/script.php?script_id=4118


==============================================================================
                                                               *origami-license*
5. License

Origami is MIT/X11 licensed
